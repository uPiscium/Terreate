#pragma once

#include "type.hpp"

namespace Terreate {
enum class Attachment {
  COLOR0 = GL_COLOR_ATTACHMENT0,
  COLOR1 = GL_COLOR_ATTACHMENT1,
  COLOR2 = GL_COLOR_ATTACHMENT2,
  COLOR3 = GL_COLOR_ATTACHMENT3,
  COLOR4 = GL_COLOR_ATTACHMENT4,
  COLOR5 = GL_COLOR_ATTACHMENT5,
  COLOR6 = GL_COLOR_ATTACHMENT6,
  COLOR7 = GL_COLOR_ATTACHMENT7,
  COLOR8 = GL_COLOR_ATTACHMENT8,
  COLOR9 = GL_COLOR_ATTACHMENT9,
  COLOR10 = GL_COLOR_ATTACHMENT10,
  COLOR11 = GL_COLOR_ATTACHMENT11,
  COLOR12 = GL_COLOR_ATTACHMENT12,
  COLOR13 = GL_COLOR_ATTACHMENT13,
  COLOR14 = GL_COLOR_ATTACHMENT14,
  COLOR15 = GL_COLOR_ATTACHMENT15,
  // COLOR16 = GL_COLOR_ATTACHMENT16,
  // COLOR17 = GL_COLOR_ATTACHMENT17,
  // COLOR18 = GL_COLOR_ATTACHMENT18,
  // COLOR19 = GL_COLOR_ATTACHMENT19,
  // COLOR20 = GL_COLOR_ATTACHMENT20,
  // COLOR21 = GL_COLOR_ATTACHMENT21,
  // COLOR22 = GL_COLOR_ATTACHMENT22,
  // COLOR23 = GL_COLOR_ATTACHMENT23,
  // COLOR24 = GL_COLOR_ATTACHMENT24,
  // COLOR25 = GL_COLOR_ATTACHMENT25,
  // COLOR26 = GL_COLOR_ATTACHMENT26,
  // COLOR27 = GL_COLOR_ATTACHMENT27,
  // COLOR28 = GL_COLOR_ATTACHMENT28,
  // COLOR29 = GL_COLOR_ATTACHMENT29,
  // COLOR30 = GL_COLOR_ATTACHMENT30,
  // COLOR31 = GL_COLOR_ATTACHMENT31
};

enum class AudioFormat {
  UNKNOWN = SDL_AUDIO_UNKNOWN,
  U8 = SDL_AUDIO_U8,
  S8 = SDL_AUDIO_S8,
  S16LE = SDL_AUDIO_S16LE,
  S16BE = SDL_AUDIO_S16BE,
  S32LE = SDL_AUDIO_S32LE,
  S32BE = SDL_AUDIO_S32BE,
  F32LE = SDL_AUDIO_F32LE,
  F32BE = SDL_AUDIO_F32BE,
  S16 = SDL_AUDIO_S16,
  S32 = SDL_AUDIO_S32,
  F32 = SDL_AUDIO_F32
};

enum class BufferBit {
  DEPTH_BUFFER = GL_DEPTH_BUFFER_BIT,
  STENCIL_BUFFER = GL_STENCIL_BUFFER_BIT,
  COLOR_BUFFER = GL_COLOR_BUFFER_BIT
};

enum class BufferUsage {
  STREAM_DRAW = GL_STREAM_DRAW,
  STREAM_READ = GL_STREAM_READ,
  STREAM_COPY = GL_STREAM_COPY,
  STATIC_DRAW = GL_STATIC_DRAW,
  STATIC_READ = GL_STATIC_READ,
  STATIC_COPY = GL_STATIC_COPY,
  DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
  DYNAMIC_READ = GL_DYNAMIC_READ,
  DYNAMIC_COPY = GL_DYNAMIC_COPY
};

enum class BufferType {
  ARRAY_BUFFER = GL_ARRAY_BUFFER,
  ELEMENT_BUFFER = GL_ELEMENT_ARRAY_BUFFER
};

enum class BlendingFunction {
  ZERO = GL_ZERO,
  ONE = GL_ONE,
  SRC_COLOR = GL_SRC_COLOR,
  ONE_MINUS_SRC_COLOR = GL_ONE_MINUS_SRC_COLOR,
  DST_COLOR = GL_DST_COLOR,
  ONE_MINUS_DST_COLOR = GL_ONE_MINUS_DST_COLOR,
  SRC_ALPHA = GL_SRC_ALPHA,
  ONE_MINUS_SRC_ALPHA = GL_ONE_MINUS_SRC_ALPHA,
  DST_ALPHA = GL_DST_ALPHA,
  ONE_MINUS_DST_ALPHA = GL_ONE_MINUS_DST_ALPHA,
  CONSTANT_COLOR = GL_CONSTANT_COLOR,
  ONE_MINUS_CONSTANT_COLOR = GL_ONE_MINUS_CONSTANT_COLOR,
  CONSTANT_ALPHA = GL_CONSTANT_ALPHA,
  ONE_MINUS_CONSTANT_ALPHA = GL_ONE_MINUS_CONSTANT_ALPHA,
  SRC_ALPHA_SATURATE = GL_SRC_ALPHA_SATURATE
};

enum class CubeFace {
  RIGHT = GL_TEXTURE_CUBE_MAP_POSITIVE_X,
  LEFT = GL_TEXTURE_CUBE_MAP_NEGATIVE_X,
  TOP = GL_TEXTURE_CUBE_MAP_POSITIVE_Y,
  BOTTOM = GL_TEXTURE_CUBE_MAP_NEGATIVE_Y,
  FRONT = GL_TEXTURE_CUBE_MAP_POSITIVE_Z,
  BACK = GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
};

enum class CullingFace {
  FRONT = GL_FRONT,
  BACK = GL_BACK,
  FRONT_AND_BACK = GL_FRONT_AND_BACK
};

enum class CullingMode { CW = GL_CW, CCW = GL_CCW };

// enum class CursorMode {
//   NORMAL = GLFW_CURSOR_NORMAL,
//   HIDDEN = GLFW_CURSOR_HIDDEN,
//   DISABLED = GLFW_CURSOR_DISABLED,
//   CAPTURED = GLFW_CURSOR_CAPTURED
// };

enum class CursorShape {
  DEFAULT = SDL_SYSTEM_CURSOR_DEFAULT,
  TEXT = SDL_SYSTEM_CURSOR_TEXT,
  WAIT = SDL_SYSTEM_CURSOR_WAIT,
  CROSSHAIR = SDL_SYSTEM_CURSOR_CROSSHAIR,
  PROGRESS = SDL_SYSTEM_CURSOR_PROGRESS,
  NWSE_RESIZE = SDL_SYSTEM_CURSOR_NWSE_RESIZE,
  NESW_RESIZE = SDL_SYSTEM_CURSOR_NESW_RESIZE,
  EW_RESIZE = SDL_SYSTEM_CURSOR_EW_RESIZE,
  NS_RESIZE = SDL_SYSTEM_CURSOR_NS_RESIZE,
  MOVE = SDL_SYSTEM_CURSOR_MOVE,
  NOT_ALLOWED = SDL_SYSTEM_CURSOR_NOT_ALLOWED,
  POINTER = SDL_SYSTEM_CURSOR_POINTER,
  NW_RESIZE = SDL_SYSTEM_CURSOR_NW_RESIZE,
  N_RESIZE = SDL_SYSTEM_CURSOR_N_RESIZE,
  NE_RESIZE = SDL_SYSTEM_CURSOR_NE_RESIZE,
  E_RESIZE = SDL_SYSTEM_CURSOR_E_RESIZE,
  SE_RESIZE = SDL_SYSTEM_CURSOR_SE_RESIZE,
  S_RESIZE = SDL_SYSTEM_CURSOR_S_RESIZE,
  SW_RESIZE = SDL_SYSTEM_CURSOR_SW_RESIZE,
  W_RESIZE = SDL_SYSTEM_CURSOR_W_RESIZE,
  LAST = SDL_SYSTEM_CURSOR_COUNT
};

enum class DepthFunction {
  NEVER = GL_NEVER,
  LESS = GL_LESS,
  EQUAL = GL_EQUAL,
  LEQUAL = GL_LEQUAL,
  GREATER = GL_GREATER,
  NOTEQUAL = GL_NOTEQUAL,
  GEQUAL = GL_GEQUAL,
  ALWAYS = GL_ALWAYS
};

enum class DrawMode {
  POINTS = GL_POINTS,
  LINES = GL_LINES,
  LINE_LOOP = GL_LINE_LOOP,
  LINE_STRIP = GL_LINE_STRIP,
  TRIANGLES = GL_TRIANGLES,
  TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
  TRIANGLE_FAN = GL_TRIANGLE_FAN,
  QUADS = GL_QUADS
};

enum class FilterType {
  NEAREST = GL_NEAREST,
  LINEAR = GL_LINEAR,
  NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST, // MIN_FILTER only
  LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,   // MIN_FILTER only
  NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,   // MIN_FILTER only
  LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR      // MIN_FILTER only
};

enum class GamepadAxis {
  INVALID = SDL_GAMEPAD_AXIS_INVALID,
  LEFT_X = SDL_GAMEPAD_AXIS_LEFTX,
  LEFT_Y = SDL_GAMEPAD_AXIS_LEFTY,
  RIGHT_X = SDL_GAMEPAD_AXIS_RIGHTX,
  RIGHT_Y = SDL_GAMEPAD_AXIS_RIGHTY,
  LEFT_TRIGGER = SDL_GAMEPAD_AXIS_LEFT_TRIGGER,
  RIGHT_TRIGGER = SDL_GAMEPAD_AXIS_RIGHT_TRIGGER,
  LAST = SDL_GAMEPAD_AXIS_COUNT
};

enum class GamepadButton {
  INVALID = SDL_GAMEPAD_BUTTON_INVALID,
  A = SDL_GAMEPAD_BUTTON_SOUTH,
  B = SDL_GAMEPAD_BUTTON_EAST,
  X = SDL_GAMEPAD_BUTTON_WEST,
  Y = SDL_GAMEPAD_BUTTON_NORTH,
  BACK = SDL_GAMEPAD_BUTTON_BACK,
  GUIDE = SDL_GAMEPAD_BUTTON_GUIDE,
  START = SDL_GAMEPAD_BUTTON_START,
  LEFT_THUMB = SDL_GAMEPAD_BUTTON_LEFT_STICK,
  RIGHT_THUMB = SDL_GAMEPAD_BUTTON_RIGHT_STICK,
  LEFT_BUMPER = SDL_GAMEPAD_BUTTON_LEFT_SHOULDER,
  RIGHT_BUMPER = SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER,
  DPAD_UP = SDL_GAMEPAD_BUTTON_DPAD_UP,
  DPAD_DOWN = SDL_GAMEPAD_BUTTON_DPAD_DOWN,
  DPAD_LEFT = SDL_GAMEPAD_BUTTON_DPAD_LEFT,
  DPAD_RIGHT = SDL_GAMEPAD_BUTTON_DPAD_RIGHT,
  MISC1 = SDL_GAMEPAD_BUTTON_MISC1,
  RIGHT_PADDLE1 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,
  LEFT_PADDLE1 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,
  RIGHT_PADDLE2 = SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,
  LEFT_PADDLE2 = SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,
  MISC2 = SDL_GAMEPAD_BUTTON_MISC2,
  MISC3 = SDL_GAMEPAD_BUTTON_MISC3,
  MISC4 = SDL_GAMEPAD_BUTTON_MISC4,
  MISC5 = SDL_GAMEPAD_BUTTON_MISC5,
  MISC6 = SDL_GAMEPAD_BUTTON_MISC6,
  LAST = SDL_GAMEPAD_BUTTON_COUNT
};

enum class GamepadType {
  UNKNOWN = SDL_GAMEPAD_TYPE_UNKNOWN,
  XBOX360 = SDL_GAMEPAD_TYPE_XBOX360,
  XBOXONE = SDL_GAMEPAD_TYPE_XBOXONE,
  PS3 = SDL_GAMEPAD_TYPE_PS3,
  PS4 = SDL_GAMEPAD_TYPE_PS4,
  PS5 = SDL_GAMEPAD_TYPE_PS5,
  SWITCH_PRO = SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO,
  SWITCH_JOYCON_LEFT = SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,
  SWITCH_JOYCON_RIGHT = SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,
  SWITCH_JOYCON_PAIR = SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,
  GAMECUBE = SDL_GAMEPAD_TYPE_GAMECUBE,
  LAST = SDL_GAMEPAD_TYPE_COUNT
};

enum class GLError {
  NO_ERROR = GL_NO_ERROR,
  INVALID_ENUM = GL_INVALID_ENUM,
  INVALID_VALUE = GL_INVALID_VALUE,
  INVALID_OPERATION = GL_INVALID_OPERATION,
  STACK_OVERFLOW = GL_STACK_OVERFLOW,
  STACK_UNDERFLOW = GL_STACK_UNDERFLOW,
  OUT_OF_MEMORY = GL_OUT_OF_MEMORY,
  INVALID_FRAMEBUFFER_OPERATION = GL_INVALID_FRAMEBUFFER_OPERATION,
  CONTEXT_LOST = GL_CONTEXT_LOST
};

enum class GLFeature {
  BLEND = GL_BLEND,
  CULL_FACE = GL_CULL_FACE,
  DEPTH_TEST = GL_DEPTH_TEST,
  DITHER = GL_DITHER,
  POLYGON_OFFSET_FILL = GL_POLYGON_OFFSET_FILL,
  SAMPLE_ALPHA_TO_COVERAGE = GL_SAMPLE_ALPHA_TO_COVERAGE,
  SAMPLE_COVERAGE = GL_SAMPLE_COVERAGE,
  SCISSOR_TEST = GL_SCISSOR_TEST,
  STENCIL_TEST = GL_STENCIL_TEST
};

enum class HitTestResult {
  NORMAL = SDL_HITTEST_NORMAL,
  DRAGGABLE = SDL_HITTEST_NORMAL,
  RESIZE_TOPLEFT = SDL_HITTEST_RESIZE_TOPLEFT,
  RESIZE_TOP = SDL_HITTEST_RESIZE_TOP,
  RESIZE_TOPRIGHT = SDL_HITTEST_RESIZE_TOPRIGHT,
  RESIZE_RIGHT = SDL_HITTEST_RESIZE_RIGHT,
  RESIZE_BOTTOMRIGHT = SDL_HITTEST_RESIZE_BOTTOMRIGHT,
  RESIZE_BOTTOM = SDL_HITTEST_RESIZE_BOTTOM,
  RESIZE_BOTTOM_LEFT = SDL_HITTEST_RESIZE_BOTTOMLEFT,
  RESIZE_LEFT = SDL_HITTEST_RESIZE_LEFT
};

// enum class InputType {
//   STICKY_KEYS = GLFW_STICKY_KEYS,
//   STICKY_MOUSE_BUTTONS = GLFW_STICKY_MOUSE_BUTTONS,
//   LOCK_KEY_MODS = GLFW_LOCK_KEY_MODS,
//   RAW_MOUSE_MOTION = GLFW_RAW_MOUSE_MOTION,
//   MOUSE_PASSTHROUGH = GLFW_MOUSE_PASSTHROUGH
// };
//
enum class JoystickHatState {
  CENTERED = SDL_HAT_CENTERED,
  UP = SDL_HAT_UP,
  RIGHT = SDL_HAT_RIGHT,
  DOWN = SDL_HAT_DOWN,
  LEFT = SDL_HAT_LEFT,
  RIGHT_UP = SDL_HAT_RIGHTUP,
  RIGHT_DOWN = SDL_HAT_RIGHTDOWN,
  LEFT_UP = SDL_HAT_LEFTUP,
  LEFT_DOWN = SDL_HAT_LEFTDOWN
};

enum class Keyboard {
  K_UNKNOWN = SDL_SCANCODE_UNKNOWN,
  K_A = SDL_SCANCODE_A,
  K_B = SDL_SCANCODE_B,
  K_C = SDL_SCANCODE_C,
  K_D = SDL_SCANCODE_D,
  K_E = SDL_SCANCODE_E,
  K_F = SDL_SCANCODE_F,
  K_G = SDL_SCANCODE_G,
  K_H = SDL_SCANCODE_H,
  K_I = SDL_SCANCODE_I,
  K_J = SDL_SCANCODE_J,
  K_K = SDL_SCANCODE_K,
  K_L = SDL_SCANCODE_L,
  K_M = SDL_SCANCODE_M,
  K_N = SDL_SCANCODE_N,
  K_O = SDL_SCANCODE_O,
  K_P = SDL_SCANCODE_P,
  K_Q = SDL_SCANCODE_Q,
  K_R = SDL_SCANCODE_R,
  K_S = SDL_SCANCODE_S,
  K_T = SDL_SCANCODE_T,
  K_U = SDL_SCANCODE_U,
  K_V = SDL_SCANCODE_V,
  K_W = SDL_SCANCODE_W,
  K_X = SDL_SCANCODE_X,
  K_Y = SDL_SCANCODE_Y,
  K_Z = SDL_SCANCODE_Z,
  K_1 = SDL_SCANCODE_1,
  K_2 = SDL_SCANCODE_2,
  K_3 = SDL_SCANCODE_3,
  K_4 = SDL_SCANCODE_4,
  K_5 = SDL_SCANCODE_5,
  K_6 = SDL_SCANCODE_6,
  K_7 = SDL_SCANCODE_7,
  K_8 = SDL_SCANCODE_8,
  K_9 = SDL_SCANCODE_9,
  K_0 = SDL_SCANCODE_0,
  K_RETURN = SDL_SCANCODE_RETURN,
  K_ESCAPE = SDL_SCANCODE_ESCAPE,
  K_BACKSPACE = SDL_SCANCODE_BACKSPACE,
  K_TAB = SDL_SCANCODE_TAB,
  K_SPACE = SDL_SCANCODE_SPACE,
  K_MINUS = SDL_SCANCODE_MINUS,
  K_EQUALS = SDL_SCANCODE_EQUALS,
  K_LEFT_BRACKET = SDL_SCANCODE_LEFTBRACKET,
  K_RIGHT_BRACKET = SDL_SCANCODE_RIGHTBRACKET,
  K_BACKSLASH = SDL_SCANCODE_BACKSLASH,
  K_NON_US_HASH = SDL_SCANCODE_NONUSHASH, // BACKSLASH?
  K_SEMICOLON = SDL_SCANCODE_SEMICOLON,
  K_APOSTROPHE = SDL_SCANCODE_APOSTROPHE,
  K_GRAVE_ACCENT = SDL_SCANCODE_GRAVE, // ?
  K_COMMA = SDL_SCANCODE_COMMA,
  K_PERIOD = SDL_SCANCODE_PERIOD,
  K_SLASH = SDL_SCANCODE_SLASH,
  K_CAPS_LOCK = SDL_SCANCODE_CAPSLOCK,
  K_F1 = SDL_SCANCODE_F1,
  K_F2 = SDL_SCANCODE_F2,
  K_F3 = SDL_SCANCODE_F3,
  K_F4 = SDL_SCANCODE_F4,
  K_F5 = SDL_SCANCODE_F5,
  K_F6 = SDL_SCANCODE_F6,
  K_F7 = SDL_SCANCODE_F7,
  K_F8 = SDL_SCANCODE_F8,
  K_F9 = SDL_SCANCODE_F9,
  K_F10 = SDL_SCANCODE_F10,
  K_F11 = SDL_SCANCODE_F11,
  K_F12 = SDL_SCANCODE_F12,
  K_PRINT_SCREEN = SDL_SCANCODE_PRINTSCREEN,
  K_SCROLL_LOCK = SDL_SCANCODE_SCROLLLOCK,
  K_PAUSE = SDL_SCANCODE_PAUSE,
  K_INSERT = SDL_SCANCODE_INSERT,
  K_HOME = SDL_SCANCODE_HOME,
  K_PAGE_UP = SDL_SCANCODE_PAGEUP,
  K_DELETE = SDL_SCANCODE_DELETE,
  K_END = SDL_SCANCODE_END,
  K_PAGE_DOWN = SDL_SCANCODE_PAGEDOWN,
  K_RIGHT = SDL_SCANCODE_RIGHT,
  K_LEFT = SDL_SCANCODE_LEFT,
  K_DOWN = SDL_SCANCODE_DOWN,
  K_UP = SDL_SCANCODE_UP,
  K_NUM_LOCK_CLEAR = SDL_SCANCODE_NUMLOCKCLEAR,
  K_KP_DIVIDE = SDL_SCANCODE_KP_DIVIDE,
  K_KP_MULTIPLY = SDL_SCANCODE_KP_MULTIPLY,
  K_KP_MINUS = SDL_SCANCODE_KP_MINUS,
  K_KP_PLUS = SDL_SCANCODE_KP_PLUS,
  K_KP_ENTER = SDL_SCANCODE_KP_ENTER,
  K_KP_1 = SDL_SCANCODE_KP_1,
  K_KP_2 = SDL_SCANCODE_KP_2,
  K_KP_3 = SDL_SCANCODE_KP_3,
  K_KP_4 = SDL_SCANCODE_KP_4,
  K_KP_5 = SDL_SCANCODE_KP_5,
  K_KP_6 = SDL_SCANCODE_KP_6,
  K_KP_7 = SDL_SCANCODE_KP_7,
  K_KP_8 = SDL_SCANCODE_KP_8,
  K_KP_9 = SDL_SCANCODE_KP_9,
  K_KP_0 = SDL_SCANCODE_KP_0,
  K_KP_PERIOD = SDL_SCANCODE_KP_PERIOD,
  K_NON_US_BACKSLASH = SDL_SCANCODE_NONUSBACKSLASH, // ?
  K_APPLICATION = SDL_SCANCODE_APPLICATION,
  K_POWER = SDL_SCANCODE_POWER,
  K_KP_EQUALS = SDL_SCANCODE_KP_EQUALS,
  K_F13 = SDL_SCANCODE_F13,
  K_F14 = SDL_SCANCODE_F14,
  K_F15 = SDL_SCANCODE_F15,
  K_F16 = SDL_SCANCODE_F16,
  K_F17 = SDL_SCANCODE_F17,
  K_F18 = SDL_SCANCODE_F18,
  K_F19 = SDL_SCANCODE_F19,
  K_F20 = SDL_SCANCODE_F20,
  K_F21 = SDL_SCANCODE_F21,
  K_F22 = SDL_SCANCODE_F22,
  K_F23 = SDL_SCANCODE_F23,
  K_F24 = SDL_SCANCODE_F24,
  K_EXECUTE = SDL_SCANCODE_EXECUTE,
  K_HELP = SDL_SCANCODE_HELP,
  K_MENU = SDL_SCANCODE_MENU,
  K_SELECT = SDL_SCANCODE_SELECT,
  K_STOP = SDL_SCANCODE_STOP,
  K_AGAIN = SDL_SCANCODE_AGAIN,
  K_UNDO = SDL_SCANCODE_UNDO,
  K_CUT = SDL_SCANCODE_CUT,
  K_COPY = SDL_SCANCODE_COPY,
  K_PASTE = SDL_SCANCODE_PASTE,
  K_FIND = SDL_SCANCODE_FIND,
  K_MUTE = SDL_SCANCODE_MUTE,
  K_VOLUME_UP = SDL_SCANCODE_VOLUMEUP,
  K_VOLUME_DOWN = SDL_SCANCODE_VOLUMEDOWN,
  K_KP_COMMA = SDL_SCANCODE_KP_COMMA,
  K_KP_EQUALS_AS400 = SDL_SCANCODE_KP_EQUALSAS400,
  K_INTERNATIONAL1 = SDL_SCANCODE_INTERNATIONAL1,
  K_INTERNATIONAL2 = SDL_SCANCODE_INTERNATIONAL2,
  K_INTERNATIONAL3 = SDL_SCANCODE_INTERNATIONAL3, // Yen
  K_INTERNATIONAL4 = SDL_SCANCODE_INTERNATIONAL4,
  K_INTERNATIONAL5 = SDL_SCANCODE_INTERNATIONAL5,
  K_INTERNATIONAL6 = SDL_SCANCODE_INTERNATIONAL6,
  K_INTERNATIONAL7 = SDL_SCANCODE_INTERNATIONAL7,
  K_INTERNATIONAL8 = SDL_SCANCODE_INTERNATIONAL8,
  K_INTERNATIONAL9 = SDL_SCANCODE_INTERNATIONAL9,
  K_LANG1 = SDL_SCANCODE_LANG1,       // Hangul/English toggle
  K_LANG2 = SDL_SCANCODE_LANG2,       // Hanja conversion
  K_LANG3 = SDL_SCANCODE_LANG3,       // Katakana
  K_LANG4 = SDL_SCANCODE_LANG4,       // Hiragana
  K_LANG5 = SDL_SCANCODE_LANG5,       // Zenkaku/Hankaku
  K_LANG6 = SDL_SCANCODE_LANG6,       // reserved
  K_LANG7 = SDL_SCANCODE_LANG7,       // reserved
  K_LANG8 = SDL_SCANCODE_LANG8,       // reserved
  K_LANG9 = SDL_SCANCODE_LANG9,       // reserved
  K_ALTERASE = SDL_SCANCODE_ALTERASE, // Erase-Eaze
  K_SYSREQ = SDL_SCANCODE_SYSREQ,
  K_CANCEL = SDL_SCANCODE_CANCEL, // AC Cancel
  K_CLEAR = SDL_SCANCODE_CLEAR,
  K_PRIOR = SDL_SCANCODE_PRIOR,
  K_RETURN2 = SDL_SCANCODE_RETURN2,
  K_SEPARATOR = SDL_SCANCODE_SEPARATOR,
  K_OUT = SDL_SCANCODE_OUT,
  K_OPER = SDL_SCANCODE_OPER,
  K_CLEAR_AGAIN = SDL_SCANCODE_CLEARAGAIN,
  K_CRSEL = SDL_SCANCODE_CRSEL,
  K_EXSEL = SDL_SCANCODE_EXSEL,
  K_KP_00 = SDL_SCANCODE_KP_00,
  K_KP_000 = SDL_SCANCODE_KP_000,
  K_THOUSANDS_SEPARATOR = SDL_SCANCODE_THOUSANDSSEPARATOR,
  K_DECIMAL_SEPARATOR = SDL_SCANCODE_DECIMALSEPARATOR,
  K_CURRENCY_UNIT = SDL_SCANCODE_CURRENCYUNIT,
  K_CURRENCY_SUBUNIT = SDL_SCANCODE_CURRENCYSUBUNIT,
  K_KP_LEFT_PAREN = SDL_SCANCODE_KP_LEFTPAREN,
  K_KP_RIGHT_PAREN = SDL_SCANCODE_KP_RIGHTPAREN,
  K_KP_LEFT_BRACE = SDL_SCANCODE_KP_LEFTBRACE,
  K_KP_RIGHT_BRACE = SDL_SCANCODE_KP_RIGHTBRACE,
  K_KP_TAB = SDL_SCANCODE_KP_TAB,
  K_KP_BACKSPACE = SDL_SCANCODE_KP_BACKSPACE,
  K_KP_A = SDL_SCANCODE_KP_A,
  K_KP_B = SDL_SCANCODE_KP_B,
  K_KP_C = SDL_SCANCODE_KP_C,
  K_KP_D = SDL_SCANCODE_KP_D,
  K_KP_E = SDL_SCANCODE_KP_E,
  K_KP_F = SDL_SCANCODE_KP_F,
  K_KP_XOR = SDL_SCANCODE_KP_XOR,
  K_KP_POWER = SDL_SCANCODE_KP_POWER,
  K_KP_PERCENT = SDL_SCANCODE_KP_PERCENT,
  K_KP_LESS = SDL_SCANCODE_KP_LESS,
  K_KP_GREATER = SDL_SCANCODE_KP_GREATER,
  K_KP_AMPERSAND = SDL_SCANCODE_KP_AMPERSAND,
  K_KP_DOUBLEAMPERSAND = SDL_SCANCODE_KP_DBLAMPERSAND,
  K_KP_VERTICALBAR = SDL_SCANCODE_KP_VERTICALBAR,
  K_KP_DOUBLEVERTICALBAR = SDL_SCANCODE_KP_DBLVERTICALBAR,
  K_KP_COLON = SDL_SCANCODE_KP_COLON,
  K_KP_HASH = SDL_SCANCODE_KP_HASH,
  K_KP_SPACE = SDL_SCANCODE_KP_SPACE,
  K_KP_AT = SDL_SCANCODE_KP_AT,
  K_KP_EXCLAM = SDL_SCANCODE_KP_EXCLAM,
  K_KP_MEMSTORE = SDL_SCANCODE_KP_MEMSTORE,
  K_KP_MEMRECALL = SDL_SCANCODE_KP_MEMRECALL,
  K_KP_MEMCLEAR = SDL_SCANCODE_KP_MEMCLEAR,
  K_KP_MEMADD = SDL_SCANCODE_KP_MEMADD,
  K_KP_MEMSUBTRACT = SDL_SCANCODE_KP_MEMSUBTRACT,
  K_KP_MEMMULTIPLY = SDL_SCANCODE_KP_MEMMULTIPLY,
  K_KP_MEMDIVIDE = SDL_SCANCODE_KP_MEMDIVIDE,
  K_KP_PLUSMINUS = SDL_SCANCODE_KP_PLUSMINUS,
  K_KP_CLEAR = SDL_SCANCODE_KP_CLEAR,
  K_KP_CLEARENTRY = SDL_SCANCODE_KP_CLEARENTRY,
  K_KP_BINARY = SDL_SCANCODE_KP_BINARY,
  K_KP_OCTAL = SDL_SCANCODE_KP_OCTAL,
  K_KP_DECIMAL = SDL_SCANCODE_KP_DECIMAL,
  K_KP_HEXADECIMAL = SDL_SCANCODE_KP_HEXADECIMAL,
  K_LCTRL = SDL_SCANCODE_LCTRL,
  K_LSHIFT = SDL_SCANCODE_LSHIFT,
  K_LALT = SDL_SCANCODE_LALT,
  K_LGUI = SDL_SCANCODE_LGUI,
  K_RCTRL = SDL_SCANCODE_RCTRL,
  K_RSHIFT = SDL_SCANCODE_RSHIFT,
  K_RALT = SDL_SCANCODE_RALT,
  K_RGUI = SDL_SCANCODE_RGUI,
  K_MODE = SDL_SCANCODE_MODE, // ?
  K_SLEEP = SDL_SCANCODE_SLEEP,
  K_WAKE = SDL_SCANCODE_WAKE,
  K_CHANNEL_INCRIMENT = SDL_SCANCODE_CHANNEL_INCREMENT,
  K_CHANNEL_DECRIMENT = SDL_SCANCODE_CHANNEL_DECREMENT,
  K_MEDIA_PLAY = SDL_SCANCODE_MEDIA_PLAY,
  K_MEDIA_PAUSE = SDL_SCANCODE_MEDIA_PAUSE,
  K_MEDIA_RECORD = SDL_SCANCODE_MEDIA_RECORD,
  K_MEDIA_FAST_FORWARD = SDL_SCANCODE_MEDIA_FAST_FORWARD,
  K_MEDIA_REWIND = SDL_SCANCODE_MEDIA_REWIND,
  K_MEDIA_NEXT_TRACK = SDL_SCANCODE_MEDIA_NEXT_TRACK,
  K_MEDIA_PREVIOUS_TRACK = SDL_SCANCODE_MEDIA_PREVIOUS_TRACK,
  K_MEDIA_STOP = SDL_SCANCODE_MEDIA_STOP,
  K_MEDIA_EJECT = SDL_SCANCODE_MEDIA_EJECT,
  K_MEDIA_PLAY_PAUSE = SDL_SCANCODE_MEDIA_PLAY_PAUSE,
  K_MEDIA_SELECT = SDL_SCANCODE_MEDIA_SELECT,
  K_AC_NEW = SDL_SCANCODE_AC_NEW,
  K_AC_OPEN = SDL_SCANCODE_AC_OPEN,
  K_AC_CLOSE = SDL_SCANCODE_AC_CLOSE,
  K_AC_EXIT = SDL_SCANCODE_AC_EXIT,
  K_AC_SAVE = SDL_SCANCODE_AC_SAVE,
  K_AC_PRINT = SDL_SCANCODE_AC_PRINT,
  K_AC_PROPERTIES = SDL_SCANCODE_AC_PROPERTIES,
  K_AC_SEARCH = SDL_SCANCODE_AC_SEARCH,
  K_AC_HOME = SDL_SCANCODE_AC_HOME,
  K_AC_BACK = SDL_SCANCODE_AC_BACK,
  K_AC_FORWARD = SDL_SCANCODE_AC_FORWARD,
  K_AC_STOP = SDL_SCANCODE_AC_STOP,
  K_AC_REFRESH = SDL_SCANCODE_AC_REFRESH,
  K_AC_BOOKMARKS = SDL_SCANCODE_AC_BOOKMARKS,
  K_SOFTLEFT = SDL_SCANCODE_SOFTLEFT,
  K_SOFTRIGHT = SDL_SCANCODE_SOFTRIGHT,
  K_CALL = SDL_SCANCODE_CALL,
  K_ENDCALL = SDL_SCANCODE_ENDCALL,
  K_RESERVED = SDL_SCANCODE_RESERVED, // reserved for future use
  LAST = SDL_SCANCODE_COUNT           // total number of scancodes
};

enum class MouseButton {
  LEFT = SDL_BUTTON_LEFT,
  MIDDLE = SDL_BUTTON_MIDDLE,
  RIGHT = SDL_BUTTON_RIGHT,
  X1 = SDL_BUTTON_X1,
  X2 = SDL_BUTTON_X2,
  BUTTON1 = SDL_BUTTON_LEFT,
  BUTTON2 = SDL_BUTTON_MIDDLE,
  BUTTON3 = SDL_BUTTON_RIGHT,
  BUTTON4 = SDL_BUTTON_X1,
  BUTTON5 = SDL_BUTTON_X2
};

enum class MouseWheelDirection {
  NORMAL = SDL_MOUSEWHEEL_NORMAL,
  FLIPPED = SDL_MOUSEWHEEL_FLIPPED
};

enum class PenAxis {
  PRESSURE = SDL_PEN_AXIS_PRESSURE,
  XTILT = SDL_PEN_AXIS_XTILT,
  YTILT = SDL_PEN_AXIS_YTILT,
  DISTANCE = SDL_PEN_AXIS_DISTANCE,
  ROTATION = SDL_PEN_AXIS_ROTATION,
  SLIDER = SDL_PEN_AXIS_SLIDER,
  TANGENTIAL_PRESSURE = SDL_PEN_AXIS_TANGENTIAL_PRESSURE,
  COUNT = SDL_PEN_AXIS_COUNT
};

enum class PenState {
  DOWN = SDL_PEN_INPUT_DOWN,
  BUTTON_1 = SDL_PEN_INPUT_BUTTON_1,
  BUTTON_2 = SDL_PEN_INPUT_BUTTON_2,
  BUTTON_3 = SDL_PEN_INPUT_BUTTON_3,
  BUTTON_4 = SDL_PEN_INPUT_BUTTON_4,
  BUTTON_5 = SDL_PEN_INPUT_BUTTON_5,
  ERASER_TIP = SDL_PEN_INPUT_ERASER_TIP
};

enum class PowerState {
  UNKNOWN = SDL_POWERSTATE_UNKNOWN,
  ON_BATTERY = SDL_POWERSTATE_ON_BATTERY,
  NO_BATTERY = SDL_POWERSTATE_NO_BATTERY,
  CHARGING = SDL_POWERSTATE_CHARGING,
  CHARGED = SDL_POWERSTATE_CHARGED,
};

enum class SDLSensor {
  INVALID = SDL_SENSOR_INVALID,
  UNKNOWN = SDL_SENSOR_UNKNOWN,
  ACCELEROMETER = SDL_SENSOR_ACCEL,
  GYROSCOPE = SDL_SENSOR_GYRO,
  ACCELEROMETER_L = SDL_SENSOR_ACCEL_L, // Left Joy-Con or Wii Nunchuk
  GYROSCOPE_L = SDL_SENSOR_GYRO_L,      // Left Joy-Con
  ACCELEROMETER_R = SDL_SENSOR_ACCEL_R, // Right Joy-Con
  GYROSCOPE_R = SDL_SENSOR_GYRO_R,      // Right Joy-Con
};

enum class StencilFunction {
  NEVER = GL_NEVER,
  LESS = GL_LESS,
  EQUAL = GL_EQUAL,
  LEQUAL = GL_LEQUAL,
  GREATER = GL_GREATER,
  NOTEQUAL = GL_NOTEQUAL,
  GEQUAL = GL_GEQUAL,
  ALWAYS = GL_ALWAYS
};

enum class StencilOperation {
  KEEP = GL_KEEP,
  ZERO = GL_ZERO,
  REPLACE = GL_REPLACE,
  INCR = GL_INCR,
  INCR_WRAP = GL_INCR_WRAP,
  DECR = GL_DECR,
  DECR_WRAP = GL_DECR_WRAP,
  INVERT = GL_INVERT
};

enum class TextureChannelType {
  /* RED = GL_RED, */
  /* R16F = GL_R16F, */
  /* R32F = GL_R32F, */
  /* RG = GL_RG, */
  /* RG16F = GL_RG16F, */
  /* RG32F = GL_RG32F, */
  /* RGB = GL_RGB, */
  /* RGB16F = GL_RGB16F, */
  /* RGB32F = GL_RGB32F, */
  RGBA = GL_RGBA,
  RGBA16F = GL_RGBA16F,
  RGBA32F = GL_RGBA32F
};

enum class TextCandidateOrientation { HORIZONTAL, VERTICAL };

enum class TextureTargets {
  TEX_0 = GL_TEXTURE0,
  TEX_1 = GL_TEXTURE1,
  TEX_2 = GL_TEXTURE2,
  TEX_3 = GL_TEXTURE3,
  TEX_4 = GL_TEXTURE4,
  TEX_5 = GL_TEXTURE5,
  TEX_6 = GL_TEXTURE6,
  TEX_7 = GL_TEXTURE7,
  TEX_8 = GL_TEXTURE8,
  TEX_9 = GL_TEXTURE9,
  TEX_10 = GL_TEXTURE10,
  TEX_11 = GL_TEXTURE11,
  TEX_12 = GL_TEXTURE12,
  TEX_13 = GL_TEXTURE13,
  TEX_14 = GL_TEXTURE14,
  TEX_15 = GL_TEXTURE15,
  TEX_16 = GL_TEXTURE16,
  TEX_17 = GL_TEXTURE17,
  TEX_18 = GL_TEXTURE18,
  TEX_19 = GL_TEXTURE19,
  TEX_20 = GL_TEXTURE20,
  TEX_21 = GL_TEXTURE21,
  TEX_22 = GL_TEXTURE22,
  TEX_23 = GL_TEXTURE23,
  TEX_24 = GL_TEXTURE24,
  TEX_25 = GL_TEXTURE25,
  TEX_26 = GL_TEXTURE26,
  TEX_27 = GL_TEXTURE27,
  TEX_28 = GL_TEXTURE28,
  TEX_29 = GL_TEXTURE29,
  TEX_30 = GL_TEXTURE30,
  TEX_31 = GL_TEXTURE31,
};

enum class WrappingType {
  CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
  CLAMP_TO_BORDER = GL_CLAMP_TO_BORDER,
  MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
  REPEAT = GL_REPEAT
};
} // namespace Terreate
