// #pragma once
// #include <api.hpp>

// namespace Terreate::Enum {

// enum class CursorMode {
//   NORMAL = GLFW_CURSOR_NORMAL,
//   HIDDEN = GLFW_CURSOR_HIDDEN,
//   DISABLED = GLFW_CURSOR_DISABLED,
//   CAPTURED = GLFW_CURSOR_CAPTURED
// };

// enum class CursorShape {
//   DEFAULT = -1,
//   ARROW = GLFW_ARROW_CURSOR,
//   IBEAM = GLFW_IBEAM_CURSOR,
//   CROSSHAIR = GLFW_CROSSHAIR_CURSOR,
//   HAND = GLFW_HAND_CURSOR,
//   HRESIZE = GLFW_HRESIZE_CURSOR,
//   VRESIZE = GLFW_VRESIZE_CURSOR,
//   POINTGLFW_POINTING_HAND = GLFW_POINTING_HAND_CURSOR,
//   RESIZE_EW = GLFW_RESIZE_EW_CURSOR,
//   RESIZE_NS = GLFW_RESIZE_NS_CURSOR,
//   RESIZE_NWSE = GLFW_RESIZE_NWSE_CURSOR,
//   RESIZE_NESW = GLFW_RESIZE_NESW_CURSOR,
//   RESIZE_ALL = GLFW_RESIZE_ALL_CURSOR,
//   NOT_ALLOWED = GLFW_NOT_ALLOWED_CURSOR
// };

// enum class InputType {
//   STICKY_KEYS = GLFW_STICKY_KEYS,
//   STICKY_MOUSE_BUTTONS = GLFW_STICKY_MOUSE_BUTTONS,
//   LOCK_KEY_MODS = GLFW_LOCK_KEY_MODS,
//   RAW_MOUSE_MOTION = GLFW_RAW_MOUSE_MOTION,
//   MOUSE_PASSTHROUGH = GLFW_MOUSE_PASSTHROUGH
// };

// enum class JoystickAxis {
//   LEFT_X = GLFW_GAMEPAD_AXIS_LEFT_X,
//   LEFT_Y = GLFW_GAMEPAD_AXIS_LEFT_Y,
//   RIGHT_X = GLFW_GAMEPAD_AXIS_RIGHT_X,
//   RIGHT_Y = GLFW_GAMEPAD_AXIS_RIGHT_Y,
//   LEFT_TRIGGER = GLFW_GAMEPAD_AXIS_LEFT_TRIGGER,
//   RIGHT_TRIGGER = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER,
//   LAST = GLFW_GAMEPAD_AXIS_LAST
// };

// enum class JoystickButton {
//   A = GLFW_GAMEPAD_BUTTON_A,
//   B = GLFW_GAMEPAD_BUTTON_B,
//   X = GLFW_GAMEPAD_BUTTON_X,
//   Y = GLFW_GAMEPAD_BUTTON_Y,
//   LEFT_BUMPER = GLFW_GAMEPAD_BUTTON_LEFT_BUMPER,
//   RIGHT_BUMPER = GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER,
//   BACK = GLFW_GAMEPAD_BUTTON_BACK,
//   START = GLFW_GAMEPAD_BUTTON_START,
//   GUIDE = GLFW_GAMEPAD_BUTTON_GUIDE,
//   LEFT_THUMB = GLFW_GAMEPAD_BUTTON_LEFT_THUMB,
//   RIGHT_THUMB = GLFW_GAMEPAD_BUTTON_RIGHT_THUMB,
//   DPAD_UP = GLFW_GAMEPAD_BUTTON_DPAD_UP,
//   DPAD_RIGHT = GLFW_GAMEPAD_BUTTON_DPAD_RIGHT,
//   DPAD_DOWN = GLFW_GAMEPAD_BUTTON_DPAD_DOWN,
//   DPAD_LEFT = GLFW_GAMEPAD_BUTTON_DPAD_LEFT,
//   CROSS = GLFW_GAMEPAD_BUTTON_CROSS,
//   CIRCLE = GLFW_GAMEPAD_BUTTON_CIRCLE,
//   SQUARE = GLFW_GAMEPAD_BUTTON_SQUARE,
//   TRIANGLE = GLFW_GAMEPAD_BUTTON_TRIANGLE,
//   LAST = GLFW_GAMEPAD_BUTTON_LAST
// };

// enum class JoystickEvent {
//   CONNECTED = GLFW_CONNECTED,
//   DISCONNECTED = GLFW_DISCONNECTED
// };

// enum class JoystickHat {
//   UP = GLFW_HAT_UP,
//   RIGHT = GLFW_HAT_RIGHT,
//   DOWN = GLFW_HAT_DOWN,
//   LEFT = GLFW_HAT_LEFT,
//   RIGHT_UP = GLFW_HAT_RIGHT_UP,
//   RIGHT_DOWN = GLFW_HAT_RIGHT_DOWN,
//   LEFT_UP = GLFW_HAT_LEFT_UP,
//   LEFT_DOWN = GLFW_HAT_LEFT_DOWN
// };

// enum class JoystickID {
//   NONE = -1,
//   JOYSTICK1 = GLFW_JOYSTICK_1,
//   JOYSTICK2 = GLFW_JOYSTICK_2,
//   JOYSTICK3 = GLFW_JOYSTICK_3,
//   JOYSTICK4 = GLFW_JOYSTICK_4,
//   JOYSTICK5 = GLFW_JOYSTICK_5,
//   JOYSTICK6 = GLFW_JOYSTICK_6,
//   JOYSTICK7 = GLFW_JOYSTICK_7,
//   JOYSTICK8 = GLFW_JOYSTICK_8,
//   JOYSTICK9 = GLFW_JOYSTICK_9,
//   JOYSTICK10 = GLFW_JOYSTICK_10,
//   JOYSTICK11 = GLFW_JOYSTICK_11,
//   JOYSTICK12 = GLFW_JOYSTICK_12,
//   JOYSTICK13 = GLFW_JOYSTICK_13,
//   JOYSTICK14 = GLFW_JOYSTICK_14,
//   JOYSTICK15 = GLFW_JOYSTICK_15,
//   JOYSTICK16 = GLFW_JOYSTICK_16,
//   LAST = GLFW_JOYSTICK_LAST
// };

// enum class Keyboard {
//   K_SPACE = GLFW_KEY_SPACE,
//   K_APOSTROPHE = GLFW_KEY_APOSTROPHE,
//   K_COMMA = GLFW_KEY_COMMA,
//   K_MINUS = GLFW_KEY_MINUS,
//   K_PERIOD = GLFW_KEY_PERIOD,
//   K_SLASH = GLFW_KEY_SLASH,
//   K_0 = GLFW_KEY_0,
//   K_1 = GLFW_KEY_1,
//   K_2 = GLFW_KEY_2,
//   K_3 = GLFW_KEY_3,
//   K_4 = GLFW_KEY_4,
//   K_5 = GLFW_KEY_5,
//   K_6 = GLFW_KEY_6,
//   K_7 = GLFW_KEY_7,
//   K_8 = GLFW_KEY_8,
//   K_9 = GLFW_KEY_9,
//   K_SEMICOLON = GLFW_KEY_SEMICOLON,
//   K_EQUAL = GLFW_KEY_EQUAL,
//   K_A = GLFW_KEY_A,
//   K_B = GLFW_KEY_B,
//   K_C = GLFW_KEY_C,
//   K_D = GLFW_KEY_D,
//   K_E = GLFW_KEY_E,
//   K_F = GLFW_KEY_F,
//   K_G = GLFW_KEY_G,
//   K_H = GLFW_KEY_H,
//   K_I = GLFW_KEY_I,
//   K_J = GLFW_KEY_J,
//   K_K = GLFW_KEY_K,
//   K_L = GLFW_KEY_L,
//   K_M = GLFW_KEY_M,
//   K_N = GLFW_KEY_N,
//   K_O = GLFW_KEY_O,
//   K_P = GLFW_KEY_P,
//   K_Q = GLFW_KEY_Q,
//   K_R = GLFW_KEY_R,
//   K_S = GLFW_KEY_S,
//   K_T = GLFW_KEY_T,
//   K_U = GLFW_KEY_U,
//   K_V = GLFW_KEY_V,
//   K_W = GLFW_KEY_W,
//   K_X = GLFW_KEY_X,
//   K_Y = GLFW_KEY_Y,
//   K_Z = GLFW_KEY_Z,
//   K_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
//   K_BACKSLASH = GLFW_KEY_BACKSLASH,
//   K_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
//   K_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
//   K_WORLD_1 = GLFW_KEY_WORLD_1,
//   K_WORLD_2 = GLFW_KEY_WORLD_2,
//   K_ESCAPE = GLFW_KEY_ESCAPE,
//   K_ENTER = GLFW_KEY_ENTER,
//   K_TAB = GLFW_KEY_TAB,
//   K_BACKSPACE = GLFW_KEY_BACKSPACE,
//   K_INSERT = GLFW_KEY_INSERT,
//   K_DELETE = GLFW_KEY_DELETE,
//   K_RIGHT = GLFW_KEY_RIGHT,
//   K_LEFT = GLFW_KEY_LEFT,
//   K_DOWN = GLFW_KEY_DOWN,
//   K_UP = GLFW_KEY_UP,
//   K_PAGE_UP = GLFW_KEY_PAGE_UP,
//   K_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
//   K_HOME = GLFW_KEY_HOME,
//   K_END = GLFW_KEY_END,
//   K_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
//   K_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
//   K_NUM_LOCK = GLFW_KEY_NUM_LOCK,
//   K_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
//   K_PAUSE = GLFW_KEY_PAUSE,
//   K_F1 = GLFW_KEY_F1,
//   K_F2 = GLFW_KEY_F2,
//   K_F3 = GLFW_KEY_F3,
//   K_F4 = GLFW_KEY_F4,
//   K_F5 = GLFW_KEY_F5,
//   K_F6 = GLFW_KEY_F6,
//   K_F7 = GLFW_KEY_F7,
//   K_F8 = GLFW_KEY_F8,
//   K_F9 = GLFW_KEY_F9,
//   K_F10 = GLFW_KEY_F10,
//   K_F11 = GLFW_KEY_F11,
//   K_F12 = GLFW_KEY_F12,
//   K_F13 = GLFW_KEY_F13,
//   K_F14 = GLFW_KEY_F14,
//   K_F15 = GLFW_KEY_F15,
//   K_F16 = GLFW_KEY_F16,
//   K_F17 = GLFW_KEY_F17,
//   K_F18 = GLFW_KEY_F18,
//   K_F19 = GLFW_KEY_F19,
//   K_F20 = GLFW_KEY_F20,
//   K_F21 = GLFW_KEY_F21,
//   K_F22 = GLFW_KEY_F22,
//   K_F23 = GLFW_KEY_F23,
//   K_F24 = GLFW_KEY_F24,
//   K_F25 = GLFW_KEY_F25,
//   K_KP_0 = GLFW_KEY_KP_0,
//   K_KP_1 = GLFW_KEY_KP_1,
//   K_KP_2 = GLFW_KEY_KP_2,
//   K_KP_3 = GLFW_KEY_KP_3,
//   K_KP_4 = GLFW_KEY_KP_4,
//   K_KP_5 = GLFW_KEY_KP_5,
//   K_KP_6 = GLFW_KEY_KP_6,
//   K_KP_7 = GLFW_KEY_KP_7,
//   K_KP_8 = GLFW_KEY_KP_8,
//   K_KP_9 = GLFW_KEY_KP_9,
//   K_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
//   K_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
//   K_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
//   K_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
//   K_KP_ADD = GLFW_KEY_KP_ADD,
//   K_KP_ENTER = GLFW_KEY_KP_ENTER,
//   K_KP_EQUAL = GLFW_KEY_KP_EQUAL,
//   K_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
//   K_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
//   K_LEFT_ALT = GLFW_KEY_LEFT_ALT,
//   K_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
//   K_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
//   K_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
//   K_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
//   K_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
//   K_MENU = GLFW_KEY_MENU,
//   K_LAST = GLFW_KEY_LAST
// };

// // Use to select mouse button input.
// enum class MousebuttonInput {
//   BUTTON1 = GLFW_MOUSE_BUTTON_1,
//   LEFT_BUTTON = GLFW_MOUSE_BUTTON_LEFT,
//   BUTTON2 = GLFW_MOUSE_BUTTON_2,
//   RIGHT_BUTTON = GLFW_MOUSE_BUTTON_RIGHT,
//   BUTTON3 = GLFW_MOUSE_BUTTON_3,
//   MIDDLE_BUTTON = GLFW_MOUSE_BUTTON_MIDDLE,
//   BUTTON4 = GLFW_MOUSE_BUTTON_4,
//   BUTTON5 = GLFW_MOUSE_BUTTON_5,
//   BUTTON6 = GLFW_MOUSE_BUTTON_6,
//   BUTTON7 = GLFW_MOUSE_BUTTON_7,
//   BUTTON8 = GLFW_MOUSE_BUTTON_8
// };
// } // namespace Terreate::Enum
